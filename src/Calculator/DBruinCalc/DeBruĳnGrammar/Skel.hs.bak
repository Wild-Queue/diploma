-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module DBruinCalc.DeBruĳnGrammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified DBruinCalc.DeBruĳnGrammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: DBruinCalc.DeBruĳnGrammar.Abs.Ident -> Result
transIdent x = case x of
  DBruinCalc.DeBruĳnGrammar.Abs.Ident string -> failure x

transProgram :: DBruinCalc.DeBruĳnGrammar.Abs.Program -> Result
transProgram x = case x of
  DBruinCalc.DeBruĳnGrammar.Abs.AProgram term -> failure x

transTerm :: DBruinCalc.DeBruĳnGrammar.Abs.Term -> Result
transTerm x = case x of
  DBruinCalc.DeBruĳnGrammar.Abs.Var variable -> failure x
  DBruinCalc.DeBruĳnGrammar.Abs.IntConst integer -> failure x
  DBruinCalc.DeBruĳnGrammar.Abs.DoubleConst double -> failure x
  DBruinCalc.DeBruĳnGrammar.Abs.Binder variable term -> failure x
  DBruinCalc.DeBruĳnGrammar.Abs.Application term1 term2 -> failure x
  DBruinCalc.DeBruĳnGrammar.Abs.Plus term1 term2 -> failure x
  DBruinCalc.DeBruĳnGrammar.Abs.Minus term1 term2 -> failure x

transVariable :: DBruinCalc.DeBruĳnGrammar.Abs.Variable -> Result
transVariable x = case x of
  DBruinCalc.DeBruĳnGrammar.Abs.Identifier ident -> failure x
  DBruinCalc.DeBruĳnGrammar.Abs.Bound integer -> failure x
