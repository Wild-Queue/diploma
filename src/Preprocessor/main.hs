-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- | Program to test parser.

module Main where

import Prelude
  ( ($), (.)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , IO, (>>), (>>=), mapM_, putStrLn
  , FilePath
  , getContents, readFile, writeFile
  )
import System.Environment ( getArgs )
import System.Exit        ( exitFailure )
import Control.Monad      ( when )

import LBNF.LBNF.Abs   ( Grammar(..) )
import LBNF.LBNF.Lex   ( Token, mkPosToken )
import LBNF.LBNF.Par   ( pGrammar, myLexer )
import LBNF.LBNF.Print ( Print, printTree )
import qualified LBNF.ToDeBruijnGrammar.ProcessVariableNameRule
import qualified LBNF.ToDeBruijnGrammar.ProcessVariableBinderRule
import LBNF.ToDeBruijnGrammar.FindBinders ( findBindersGrammar )
import qualified LBNF.ToDeBruijnGrammar.ProcessVariableScope
import qualified LBNF.ToDefaultGrammar.ProcessVariable

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> ParseFun Grammar -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: Verbosity -> ParseFun Grammar -> String -> IO ()
run v p s =
  case p ts of
    Left err -> do
      putStrLn "\nParse              Failed...\n"
      putStrV v "Tokens:"
      mapM_ (putStrV v . showPosToken . mkPosToken) ts
      putStrLn err
      exitFailure
    Right tree -> do
      putStrLn "\nParse Successful!"
      -- showTree v tree
      let deleteList = findBindersGrammar tree []
      let dBProgramNR = LBNF.ToDeBruijnGrammar.ProcessVariableNameRule.processGrammar tree
      let dBProgramBR = LBNF.ToDeBruijnGrammar.ProcessVariableBinderRule.processGrammar dBProgramNR deleteList
      let dBProgramS = LBNF.ToDeBruijnGrammar.ProcessVariableScope.processGrammar dBProgramBR
      -- showTree v dBProgramS
      writeToFile dBProgramS "Grammars/tempDB.cf"
      let defaultProgram = LBNF.ToDefaultGrammar.ProcessVariable.processGrammar tree
      -- showTree v defaultProgram
      writeToFile defaultProgram "Grammars/tempLC.cf"
  where
  ts = myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

writeToFile :: Grammar -> String -> IO()
writeToFile program fileName = writeFile fileName (printTree program)

printList :: [String] -> IO()
printList [x] = putStrLn x 
printList (x:xs) = do 
  putStrLn x 
  printList xs

showTree :: Int -> Grammar -> IO ()
showTree v tree = do
  putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
  putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    []         -> getContents >>= run 2 pGrammar
    "-s":fs    -> mapM_ (runFile 0 pGrammar) fs
    fs         -> mapM_ (runFile 2 pGrammar) fs

