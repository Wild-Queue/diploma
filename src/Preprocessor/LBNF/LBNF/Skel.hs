-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module LBNF.LBNF.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified LBNF.LBNF.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: LBNF.LBNF.Abs.Ident -> Result
transIdent x = case x of
  LBNF.LBNF.Abs.Ident string -> failure x

transGrammar :: LBNF.LBNF.Abs.Grammar -> Result
transGrammar x = case x of
  LBNF.LBNF.Abs.MkGrammar defs -> failure x

transDef :: LBNF.LBNF.Abs.Def -> Result
transDef x = case x of
  LBNF.LBNF.Abs.Rule label cat items -> failure x
  LBNF.LBNF.Abs.Comment string -> failure x
  LBNF.LBNF.Abs.Comments string1 string2 -> failure x
  LBNF.LBNF.Abs.Internal label cat items -> failure x
  LBNF.LBNF.Abs.Token ident reg -> failure x
  LBNF.LBNF.Abs.PosToken ident reg -> failure x
  LBNF.LBNF.Abs.Entryp idents -> failure x
  LBNF.LBNF.Abs.Separator minimumsize cat string -> failure x
  LBNF.LBNF.Abs.Terminator minimumsize cat string -> failure x
  LBNF.LBNF.Abs.Coercions ident integer -> failure x
  LBNF.LBNF.Abs.Rules ident rhss -> failure x
  LBNF.LBNF.Abs.Variable variabletype cat -> failure x
  LBNF.LBNF.Abs.Layout strings -> failure x
  LBNF.LBNF.Abs.LayoutStop strings -> failure x
  LBNF.LBNF.Abs.LayoutTop -> failure x

transItem :: LBNF.LBNF.Abs.Item -> Result
transItem x = case x of
  LBNF.LBNF.Abs.Terminal string -> failure x
  LBNF.LBNF.Abs.NTerminal cat -> failure x

transCat :: LBNF.LBNF.Abs.Cat -> Result
transCat x = case x of
  LBNF.LBNF.Abs.ListCat cat -> failure x
  LBNF.LBNF.Abs.IdCat ident -> failure x

transLabel :: LBNF.LBNF.Abs.Label -> Result
transLabel x = case x of
  LBNF.LBNF.Abs.LabNoP labelid -> failure x
  LBNF.LBNF.Abs.LabP labelid profitems -> failure x
  LBNF.LBNF.Abs.LabPF labelid1 labelid2 profitems -> failure x
  LBNF.LBNF.Abs.LabF labelid1 labelid2 -> failure x

transLabelId :: LBNF.LBNF.Abs.LabelId -> Result
transLabelId x = case x of
  LBNF.LBNF.Abs.Id ident -> failure x
  LBNF.LBNF.Abs.Wild -> failure x
  LBNF.LBNF.Abs.ListE -> failure x
  LBNF.LBNF.Abs.ListCons -> failure x
  LBNF.LBNF.Abs.ListOne -> failure x

transProfItem :: LBNF.LBNF.Abs.ProfItem -> Result
transProfItem x = case x of
  LBNF.LBNF.Abs.ProfIt intlists integers -> failure x

transIntList :: LBNF.LBNF.Abs.IntList -> Result
transIntList x = case x of
  LBNF.LBNF.Abs.Ints integers -> failure x

transVariableType :: LBNF.LBNF.Abs.VariableType -> Result
transVariableType x = case x of
  LBNF.LBNF.Abs.VarScope -> failure x
  LBNF.LBNF.Abs.VarName -> failure x
  LBNF.LBNF.Abs.VarBinder -> failure x

transRHS :: LBNF.LBNF.Abs.RHS -> Result
transRHS x = case x of
  LBNF.LBNF.Abs.MkRHS items -> failure x

transMinimumSize :: LBNF.LBNF.Abs.MinimumSize -> Result
transMinimumSize x = case x of
  LBNF.LBNF.Abs.MNonempty -> failure x
  LBNF.LBNF.Abs.MEmpty -> failure x

transReg :: LBNF.LBNF.Abs.Reg -> Result
transReg x = case x of
  LBNF.LBNF.Abs.RSeq reg1 reg2 -> failure x
  LBNF.LBNF.Abs.RAlt reg1 reg2 -> failure x
  LBNF.LBNF.Abs.RMinus reg1 reg2 -> failure x
  LBNF.LBNF.Abs.RStar reg -> failure x
  LBNF.LBNF.Abs.RPlus reg -> failure x
  LBNF.LBNF.Abs.ROpt reg -> failure x
  LBNF.LBNF.Abs.REps -> failure x
  LBNF.LBNF.Abs.RChar char -> failure x
  LBNF.LBNF.Abs.RAlts string -> failure x
  LBNF.LBNF.Abs.RSeqs string -> failure x
  LBNF.LBNF.Abs.RDigit -> failure x
  LBNF.LBNF.Abs.RLetter -> failure x
  LBNF.LBNF.Abs.RUpper -> failure x
  LBNF.LBNF.Abs.RLower -> failure x
  LBNF.LBNF.Abs.RAny -> failure x
