-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from LCalc/LambdaCalculus/Par.y
-----------------------------------------------------------------------------

state 32 contains 2 shift/reduce conflicts.
state 33 contains 2 shift/reduce conflicts.
state 35 contains 2 shift/reduce conflicts.
state 38 contains 2 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pTerm -> Term                               (1)
	%start_pListTerm -> ListTerm                       (2)
	%start_pVariable -> Variable                       (3)
	Ident -> L_Ident                                   (4)
	Double -> L_doubl                                  (5)
	Integer -> L_integ                                 (6)
	Program -> ListTerm                                (7)
	Term -> Variable                                   (8)
	Term -> Integer                                    (9)
	Term -> Double                                     (10)
	Term -> 'lambda' Variable '.' Term                 (11)
	Term -> 'let' Variable '=' Term 'in' Term          (12)
	Term -> '(' Term Term ')'                          (13)
	Term -> Term '+' Term                              (14)
	Term -> Term '-' Term                              (15)
	Term -> '(' Term ')'                               (16)
	ListTerm ->                                        (17)
	ListTerm -> Term                                   (18)
	ListTerm -> Term ';' ListTerm                      (19)
	Variable -> Ident                                  (20)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'+'            { PT _ (TS _ 3) }
	'-'            { PT _ (TS _ 4) }
	'.'            { PT _ (TS _ 5) }
	';'            { PT _ (TS _ 6) }
	'='            { PT _ (TS _ 7) }
	'in'           { PT _ (TS _ 8) }
	'lambda'       { PT _ (TS _ 9) }
	'let'          { PT _ (TS _ 10) }
	L_Ident        { PT _ (TV $$) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pTerm    rule  1
	%start_pListTerm rule  2
	%start_pVariable rule  3
	Ident           rule  4
	Double          rule  5
	Integer         rule  6
	Program         rule  7
	Term            rules 8, 9, 10, 11, 12, 13, 14, 15, 16
	ListTerm        rules 17, 18, 19
	Variable        rule  20

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 13
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17
	%eof           reduce using rule 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Program        goto state 19
	Term           goto state 10
	ListTerm       goto state 20
	Variable       goto state 12

State 1

	%start_pTerm -> . Term                              (rule 1)

	'('            shift, and enter state 13
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Term           goto state 18
	Variable       goto state 12

State 2

	%start_pListTerm -> . ListTerm                      (rule 2)

	'('            shift, and enter state 13
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17
	%eof           reduce using rule 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Term           goto state 10
	ListTerm       goto state 11
	Variable       goto state 12

State 3

	%start_pVariable -> . Variable                      (rule 3)

	L_Ident        shift, and enter state 5

	Ident          goto state 6
	Variable       goto state 7

State 4

	Ident -> . L_Ident                                  (rule 4)

	L_Ident        shift, and enter state 5


State 5

	Ident -> L_Ident .                                  (rule 4)

	'('            reduce using rule 4
	')'            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'.'            reduce using rule 4
	';'            reduce using rule 4
	'='            reduce using rule 4
	'in'           reduce using rule 4
	'lambda'       reduce using rule 4
	'let'          reduce using rule 4
	L_Ident        reduce using rule 4
	L_doubl        reduce using rule 4
	L_integ        reduce using rule 4
	%eof           reduce using rule 4


State 6

	Variable -> Ident .                                 (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'.'            reduce using rule 20
	';'            reduce using rule 20
	'='            reduce using rule 20
	'in'           reduce using rule 20
	'lambda'       reduce using rule 20
	'let'          reduce using rule 20
	L_Ident        reduce using rule 20
	L_doubl        reduce using rule 20
	L_integ        reduce using rule 20
	%eof           reduce using rule 20


State 7

	%start_pVariable -> Variable .                      (rule 3)

	%eof           accept


State 8

	Term -> Double .                                    (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	';'            reduce using rule 10
	'in'           reduce using rule 10
	'lambda'       reduce using rule 10
	'let'          reduce using rule 10
	L_Ident        reduce using rule 10
	L_doubl        reduce using rule 10
	L_integ        reduce using rule 10
	%eof           reduce using rule 10


State 9

	Term -> Integer .                                   (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	';'            reduce using rule 9
	'in'           reduce using rule 9
	'lambda'       reduce using rule 9
	'let'          reduce using rule 9
	L_Ident        reduce using rule 9
	L_doubl        reduce using rule 9
	L_integ        reduce using rule 9
	%eof           reduce using rule 9


State 10

	Term -> Term . '+' Term                             (rule 14)
	Term -> Term . '-' Term                             (rule 15)
	ListTerm -> Term .                                  (rule 18)
	ListTerm -> Term . ';' ListTerm                     (rule 19)

	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	';'            shift, and enter state 26
	%eof           reduce using rule 18


State 11

	%start_pListTerm -> ListTerm .                      (rule 2)

	%eof           accept


State 12

	Term -> Variable .                                  (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	';'            reduce using rule 8
	'in'           reduce using rule 8
	'lambda'       reduce using rule 8
	'let'          reduce using rule 8
	L_Ident        reduce using rule 8
	L_doubl        reduce using rule 8
	L_integ        reduce using rule 8
	%eof           reduce using rule 8


State 13

	Term -> '(' . Term Term ')'                         (rule 13)
	Term -> '(' . Term ')'                              (rule 16)

	'('            shift, and enter state 13
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Term           goto state 25
	Variable       goto state 12

State 14

	Term -> 'lambda' . Variable '.' Term                (rule 11)

	L_Ident        shift, and enter state 5

	Ident          goto state 6
	Variable       goto state 24

State 15

	Term -> 'let' . Variable '=' Term 'in' Term         (rule 12)

	L_Ident        shift, and enter state 5

	Ident          goto state 6
	Variable       goto state 23

State 16

	Double -> L_doubl .                                 (rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	';'            reduce using rule 5
	'in'           reduce using rule 5
	'lambda'       reduce using rule 5
	'let'          reduce using rule 5
	L_Ident        reduce using rule 5
	L_doubl        reduce using rule 5
	L_integ        reduce using rule 5
	%eof           reduce using rule 5


State 17

	Integer -> L_integ .                                (rule 6)

	'('            reduce using rule 6
	')'            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	';'            reduce using rule 6
	'in'           reduce using rule 6
	'lambda'       reduce using rule 6
	'let'          reduce using rule 6
	L_Ident        reduce using rule 6
	L_doubl        reduce using rule 6
	L_integ        reduce using rule 6
	%eof           reduce using rule 6


State 18

	%start_pTerm -> Term .                              (rule 1)
	Term -> Term . '+' Term                             (rule 14)
	Term -> Term . '-' Term                             (rule 15)

	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	%eof           accept


State 19

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 20

	Program -> ListTerm .                               (rule 7)

	%eof           reduce using rule 7


State 21

	Term -> Term '+' . Term                             (rule 14)

	'('            shift, and enter state 13
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Term           goto state 33
	Variable       goto state 12

State 22

	Term -> Term '-' . Term                             (rule 15)

	'('            shift, and enter state 13
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Term           goto state 32
	Variable       goto state 12

State 23

	Term -> 'let' Variable . '=' Term 'in' Term         (rule 12)

	'='            shift, and enter state 31


State 24

	Term -> 'lambda' Variable . '.' Term                (rule 11)

	'.'            shift, and enter state 30


State 25

	Term -> '(' Term . Term ')'                         (rule 13)
	Term -> Term . '+' Term                             (rule 14)
	Term -> Term . '-' Term                             (rule 15)
	Term -> '(' Term . ')'                              (rule 16)

	'('            shift, and enter state 13
	')'            shift, and enter state 29
	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Term           goto state 28
	Variable       goto state 12

State 26

	ListTerm -> Term ';' . ListTerm                     (rule 19)

	'('            shift, and enter state 13
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17
	%eof           reduce using rule 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Term           goto state 10
	ListTerm       goto state 27
	Variable       goto state 12

State 27

	ListTerm -> Term ';' ListTerm .                     (rule 19)

	%eof           reduce using rule 19


State 28

	Term -> '(' Term Term . ')'                         (rule 13)
	Term -> Term . '+' Term                             (rule 14)
	Term -> Term . '-' Term                             (rule 15)

	')'            shift, and enter state 36
	'+'            shift, and enter state 21
	'-'            shift, and enter state 22


State 29

	Term -> '(' Term ')' .                              (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	';'            reduce using rule 16
	'in'           reduce using rule 16
	'lambda'       reduce using rule 16
	'let'          reduce using rule 16
	L_Ident        reduce using rule 16
	L_doubl        reduce using rule 16
	L_integ        reduce using rule 16
	%eof           reduce using rule 16


State 30

	Term -> 'lambda' Variable '.' . Term                (rule 11)

	'('            shift, and enter state 13
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Term           goto state 35
	Variable       goto state 12

State 31

	Term -> 'let' Variable '=' . Term 'in' Term         (rule 12)

	'('            shift, and enter state 13
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Term           goto state 34
	Variable       goto state 12

State 32

	Term -> Term . '+' Term                             (rule 14)
	Term -> Term . '-' Term                             (rule 15)
	Term -> Term '-' Term .                             (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'+'            shift, and enter state 21
			(reduce using rule 15)

	'-'            shift, and enter state 22
			(reduce using rule 15)

	';'            reduce using rule 15
	'in'           reduce using rule 15
	'lambda'       reduce using rule 15
	'let'          reduce using rule 15
	L_Ident        reduce using rule 15
	L_doubl        reduce using rule 15
	L_integ        reduce using rule 15
	%eof           reduce using rule 15


State 33

	Term -> Term . '+' Term                             (rule 14)
	Term -> Term '+' Term .                             (rule 14)
	Term -> Term . '-' Term                             (rule 15)

	'('            reduce using rule 14
	')'            reduce using rule 14
	'+'            shift, and enter state 21
			(reduce using rule 14)

	'-'            shift, and enter state 22
			(reduce using rule 14)

	';'            reduce using rule 14
	'in'           reduce using rule 14
	'lambda'       reduce using rule 14
	'let'          reduce using rule 14
	L_Ident        reduce using rule 14
	L_doubl        reduce using rule 14
	L_integ        reduce using rule 14
	%eof           reduce using rule 14


State 34

	Term -> 'let' Variable '=' Term . 'in' Term         (rule 12)
	Term -> Term . '+' Term                             (rule 14)
	Term -> Term . '-' Term                             (rule 15)

	'+'            shift, and enter state 21
	'-'            shift, and enter state 22
	'in'           shift, and enter state 37


State 35

	Term -> 'lambda' Variable '.' Term .                (rule 11)
	Term -> Term . '+' Term                             (rule 14)
	Term -> Term . '-' Term                             (rule 15)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'+'            shift, and enter state 21
			(reduce using rule 11)

	'-'            shift, and enter state 22
			(reduce using rule 11)

	';'            reduce using rule 11
	'in'           reduce using rule 11
	'lambda'       reduce using rule 11
	'let'          reduce using rule 11
	L_Ident        reduce using rule 11
	L_doubl        reduce using rule 11
	L_integ        reduce using rule 11
	%eof           reduce using rule 11


State 36

	Term -> '(' Term Term ')' .                         (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	';'            reduce using rule 13
	'in'           reduce using rule 13
	'lambda'       reduce using rule 13
	'let'          reduce using rule 13
	L_Ident        reduce using rule 13
	L_doubl        reduce using rule 13
	L_integ        reduce using rule 13
	%eof           reduce using rule 13


State 37

	Term -> 'let' Variable '=' Term 'in' . Term         (rule 12)

	'('            shift, and enter state 13
	'lambda'       shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 5
	L_doubl        shift, and enter state 16
	L_integ        shift, and enter state 17

	Ident          goto state 6
	Double         goto state 8
	Integer        goto state 9
	Term           goto state 38
	Variable       goto state 12

State 38

	Term -> 'let' Variable '=' Term 'in' Term .         (rule 12)
	Term -> Term . '+' Term                             (rule 14)
	Term -> Term . '-' Term                             (rule 15)

	'('            reduce using rule 12
	')'            reduce using rule 12
	'+'            shift, and enter state 21
			(reduce using rule 12)

	'-'            shift, and enter state 22
			(reduce using rule 12)

	';'            reduce using rule 12
	'in'           reduce using rule 12
	'lambda'       reduce using rule 12
	'let'          reduce using rule 12
	L_Ident        reduce using rule 12
	L_doubl        reduce using rule 12
	L_integ        reduce using rule 12
	%eof           reduce using rule 12


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 21
Number of terminals: 13
Number of non-terminals: 11
Number of states: 39
