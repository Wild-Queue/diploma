-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module LCalc.LambdaCalculus.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified LCalc.LambdaCalculus.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: LCalc.LambdaCalculus.Abs.Ident -> Result
transIdent x = case x of
  LCalc.LambdaCalculus.Abs.Ident string -> failure x

transProgram :: LCalc.LambdaCalculus.Abs.Program -> Result
transProgram x = case x of
  LCalc.LambdaCalculus.Abs.AProgram terms -> failure x

transTerm :: LCalc.LambdaCalculus.Abs.Term -> Result
transTerm x = case x of
  LCalc.LambdaCalculus.Abs.Var varident -> failure x
  LCalc.LambdaCalculus.Abs.Application term1 term2 -> failure x
  LCalc.LambdaCalculus.Abs.Lam pattern_ scopedterm -> failure x
  LCalc.LambdaCalculus.Abs.Let pattern_ term scopedterm -> failure x

transPattern :: LCalc.LambdaCalculus.Abs.Pattern -> Result
transPattern x = case x of
  LCalc.LambdaCalculus.Abs.PatternVar varident -> failure x

transScopedTerm :: LCalc.LambdaCalculus.Abs.ScopedTerm -> Result
transScopedTerm x = case x of
  LCalc.LambdaCalculus.Abs.ScopedTerm term -> failure x

transVarIdent :: LCalc.LambdaCalculus.Abs.VarIdent -> Result
transVarIdent x = case x of
  LCalc.LambdaCalculus.Abs.VarIdent ident -> failure x
