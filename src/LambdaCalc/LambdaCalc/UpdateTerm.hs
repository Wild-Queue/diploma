-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module LambdaCalc.UpdateNewTerm where

import Prelude (($), Either(..), String, (++), (>), Show, show, Integer, Maybe (..), fst, snd, otherwise, (==), (+))
import qualified LambdaCalc.LambdaCalculus.Abs

failure :: Show a => a -> Either String String
failure x = Left $ "Undefined case: " ++ show x


updateNewIdent :: LambdaCalc.LambdaCalculus.Abs.Ident -> Either String LambdaCalc.LambdaCalculus.Abs.Ident
updateNewIdent x = case x of
  LambdaCalc.LambdaCalculus.Abs.Ident string -> Right (LambdaCalc.LambdaCalculus.Abs.Ident string)

updateNewTerm :: LambdaCalc.LambdaCalculus.Abs.Term -> Integer -> (Integer -> Integer) -> Either String LambdaCalc.LambdaCalculus.Abs.Term
updateNewTerm x maxScope func = case x of
  LambdaCalc.LambdaCalculus.Abs.Var variable -> case updateNewVariable variable maxScope func of 
                                                  Left err -> Left err 
                                                  Right upv -> Right (LambdaCalc.LambdaCalculus.Abs.Var upv)
  LambdaCalc.LambdaCalculus.Abs.IntConst integer -> Right (LambdaCalc.LambdaCalculus.Abs.IntConst integer)
  LambdaCalc.LambdaCalculus.Abs.DoubleConst double -> Right (LambdaCalc.LambdaCalculus.Abs.DoubleConst double)
  LambdaCalc.LambdaCalculus.Abs.Binder variable term -> 
    case updateNewVariable variable maxScope func of 
      Left err -> Left err
      Right newVariable -> 
        case updateNewTerm term (maxScope+1) func of 
          Left err -> Left err
          Right newTerm -> Right (LambdaCalc.LambdaCalculus.Abs.Binder newVariable newTerm)

  LambdaCalc.LambdaCalculus.Abs.Application term1 term2 -> do 
    case updateNewTerm term1 maxScope func of 
      Left err -> Left err
      Right newTerm1 -> 
        case updateNewTerm term2 maxScope func of 
          Left err -> Left err
          Right newTerm2 -> Right (LambdaCalc.LambdaCalculus.Abs.Application newTerm1 newTerm2)

  LambdaCalc.LambdaCalculus.Abs.Plus term1 term2 -> do
    case updateNewTerm term1 maxScope func of 
      Left err -> Left err
      Right newTerm1 -> 
        case updateNewTerm term2 maxScope func of 
          Left err -> Left err
          Right newTerm2 -> Right (LambdaCalc.LambdaCalculus.Abs.Plus newTerm1 newTerm2)

  LambdaCalc.LambdaCalculus.Abs.Minus term1 term2 ->  do
    case updateNewTerm term1 maxScope func of 
      Left err -> Left err
      Right newTerm1 -> 
        case updateNewTerm term2 maxScope func of 
          Left err -> Left err
          Right newTerm2 -> Right (LambdaCalc.LambdaCalculus.Abs.Minus newTerm1 newTerm2)

updateNewVariable :: LambdaCalc.LambdaCalculus.Abs.Variable -> Integer -> (Integer -> Integer) -> Either String LambdaCalc.LambdaCalculus.Abs.Variable
updateNewVariable x maxScope func = case x of
  LambdaCalc.LambdaCalculus.Abs.Identifier ident -> case updateNewIdent ident of
    Right identifier -> Right $ (LambdaCalc.LambdaCalculus.Abs.Identifier identifier)
    _ -> Left $ "Unexpected case: " ++ show x
  LambdaCalc.LambdaCalculus.Abs.Bound integer -> if (integer > maxScope)
                                                  then Right $ (LambdaCalc.LambdaCalculus.Abs.Bound (func integer))
                                                  else Right $ (LambdaCalc.LambdaCalculus.Abs.Bound integer)
  _ -> Left $ "Unexpected case: " ++ show x
