-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from LCalc/LambdaCalculus/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pTerm -> Term                               (1)
	%start_pListTerm -> ListTerm                       (2)
	%start_pPattern -> Pattern                         (3)
	%start_pScopedTerm -> ScopedTerm                   (4)
	%start_pVarIdent -> VarIdent                       (5)
	Ident -> L_Ident                                   (6)
	Program -> ListTerm                                (7)
	Term -> VarIdent                                   (8)
	Term -> '(' Term Term ')'                          (9)
	Term -> 'fn' Pattern '=>' ScopedTerm               (10)
	Term -> 'let' Pattern '=' Term 'in' ScopedTerm     (11)
	Term -> '(' Term ')'                               (12)
	ListTerm ->                                        (13)
	ListTerm -> Term                                   (14)
	ListTerm -> Term ';' ListTerm                      (15)
	Pattern -> VarIdent                                (16)
	ScopedTerm -> Term                                 (17)
	VarIdent -> Ident                                  (18)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	';'            { PT _ (TS _ 3) }
	'='            { PT _ (TS _ 4) }
	'=>'           { PT _ (TS _ 5) }
	'fn'           { PT _ (TS _ 6) }
	'in'           { PT _ (TS _ 7) }
	'let'          { PT _ (TS _ 8) }
	L_Ident        { PT _ (TV $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pTerm    rule  1
	%start_pListTerm rule  2
	%start_pPattern rule  3
	%start_pScopedTerm rule  4
	%start_pVarIdent rule  5
	Ident           rule  6
	Program         rule  7
	Term            rules 8, 9, 10, 11, 12
	ListTerm        rules 13, 14, 15
	Pattern         rule  16
	ScopedTerm      rule  17
	VarIdent        rule  18

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'('            shift, and enter state 13
	'fn'           shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 7
	%eof           reduce using rule 13

	Ident          goto state 8
	Program        goto state 21
	Term           goto state 18
	ListTerm       goto state 22
	VarIdent       goto state 12

State 1

	%start_pTerm -> . Term                              (rule 1)

	'('            shift, and enter state 13
	'fn'           shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 7

	Ident          goto state 8
	Term           goto state 20
	VarIdent       goto state 12

State 2

	%start_pListTerm -> . ListTerm                      (rule 2)

	'('            shift, and enter state 13
	'fn'           shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 7
	%eof           reduce using rule 13

	Ident          goto state 8
	Term           goto state 18
	ListTerm       goto state 19
	VarIdent       goto state 12

State 3

	%start_pPattern -> . Pattern                        (rule 3)

	L_Ident        shift, and enter state 7

	Ident          goto state 8
	Pattern        goto state 16
	VarIdent       goto state 17

State 4

	%start_pScopedTerm -> . ScopedTerm                  (rule 4)

	'('            shift, and enter state 13
	'fn'           shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 7

	Ident          goto state 8
	Term           goto state 10
	ScopedTerm     goto state 11
	VarIdent       goto state 12

State 5

	%start_pVarIdent -> . VarIdent                      (rule 5)

	L_Ident        shift, and enter state 7

	Ident          goto state 8
	VarIdent       goto state 9

State 6

	Ident -> . L_Ident                                  (rule 6)

	L_Ident        shift, and enter state 7


State 7

	Ident -> L_Ident .                                  (rule 6)

	'('            reduce using rule 6
	')'            reduce using rule 6
	';'            reduce using rule 6
	'='            reduce using rule 6
	'=>'           reduce using rule 6
	'fn'           reduce using rule 6
	'in'           reduce using rule 6
	'let'          reduce using rule 6
	L_Ident        reduce using rule 6
	%eof           reduce using rule 6


State 8

	VarIdent -> Ident .                                 (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	';'            reduce using rule 18
	'='            reduce using rule 18
	'=>'           reduce using rule 18
	'fn'           reduce using rule 18
	'in'           reduce using rule 18
	'let'          reduce using rule 18
	L_Ident        reduce using rule 18
	%eof           reduce using rule 18


State 9

	%start_pVarIdent -> VarIdent .                      (rule 5)

	%eof           accept


State 10

	ScopedTerm -> Term .                                (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	';'            reduce using rule 17
	'fn'           reduce using rule 17
	'in'           reduce using rule 17
	'let'          reduce using rule 17
	L_Ident        reduce using rule 17
	%eof           reduce using rule 17


State 11

	%start_pScopedTerm -> ScopedTerm .                  (rule 4)

	%eof           accept


State 12

	Term -> VarIdent .                                  (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	';'            reduce using rule 8
	'fn'           reduce using rule 8
	'in'           reduce using rule 8
	'let'          reduce using rule 8
	L_Ident        reduce using rule 8
	%eof           reduce using rule 8


State 13

	Term -> '(' . Term Term ')'                         (rule 9)
	Term -> '(' . Term ')'                              (rule 12)

	'('            shift, and enter state 13
	'fn'           shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 7

	Ident          goto state 8
	Term           goto state 26
	VarIdent       goto state 12

State 14

	Term -> 'fn' . Pattern '=>' ScopedTerm              (rule 10)

	L_Ident        shift, and enter state 7

	Ident          goto state 8
	Pattern        goto state 25
	VarIdent       goto state 17

State 15

	Term -> 'let' . Pattern '=' Term 'in' ScopedTerm    (rule 11)

	L_Ident        shift, and enter state 7

	Ident          goto state 8
	Pattern        goto state 24
	VarIdent       goto state 17

State 16

	%start_pPattern -> Pattern .                        (rule 3)

	%eof           accept


State 17

	Pattern -> VarIdent .                               (rule 16)

	'='            reduce using rule 16
	'=>'           reduce using rule 16
	%eof           reduce using rule 16


State 18

	ListTerm -> Term .                                  (rule 14)
	ListTerm -> Term . ';' ListTerm                     (rule 15)

	';'            shift, and enter state 23
	%eof           reduce using rule 14


State 19

	%start_pListTerm -> ListTerm .                      (rule 2)

	%eof           accept


State 20

	%start_pTerm -> Term .                              (rule 1)

	%eof           accept


State 21

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 22

	Program -> ListTerm .                               (rule 7)

	%eof           reduce using rule 7


State 23

	ListTerm -> Term ';' . ListTerm                     (rule 15)

	'('            shift, and enter state 13
	'fn'           shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 7
	%eof           reduce using rule 13

	Ident          goto state 8
	Term           goto state 18
	ListTerm       goto state 31
	VarIdent       goto state 12

State 24

	Term -> 'let' Pattern . '=' Term 'in' ScopedTerm    (rule 11)

	'='            shift, and enter state 30


State 25

	Term -> 'fn' Pattern . '=>' ScopedTerm              (rule 10)

	'=>'           shift, and enter state 29


State 26

	Term -> '(' Term . Term ')'                         (rule 9)
	Term -> '(' Term . ')'                              (rule 12)

	'('            shift, and enter state 13
	')'            shift, and enter state 28
	'fn'           shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 7

	Ident          goto state 8
	Term           goto state 27
	VarIdent       goto state 12

State 27

	Term -> '(' Term Term . ')'                         (rule 9)

	')'            shift, and enter state 34


State 28

	Term -> '(' Term ')' .                              (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	';'            reduce using rule 12
	'fn'           reduce using rule 12
	'in'           reduce using rule 12
	'let'          reduce using rule 12
	L_Ident        reduce using rule 12
	%eof           reduce using rule 12


State 29

	Term -> 'fn' Pattern '=>' . ScopedTerm              (rule 10)

	'('            shift, and enter state 13
	'fn'           shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 7

	Ident          goto state 8
	Term           goto state 10
	ScopedTerm     goto state 33
	VarIdent       goto state 12

State 30

	Term -> 'let' Pattern '=' . Term 'in' ScopedTerm    (rule 11)

	'('            shift, and enter state 13
	'fn'           shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 7

	Ident          goto state 8
	Term           goto state 32
	VarIdent       goto state 12

State 31

	ListTerm -> Term ';' ListTerm .                     (rule 15)

	%eof           reduce using rule 15


State 32

	Term -> 'let' Pattern '=' Term . 'in' ScopedTerm    (rule 11)

	'in'           shift, and enter state 35


State 33

	Term -> 'fn' Pattern '=>' ScopedTerm .              (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	';'            reduce using rule 10
	'fn'           reduce using rule 10
	'in'           reduce using rule 10
	'let'          reduce using rule 10
	L_Ident        reduce using rule 10
	%eof           reduce using rule 10


State 34

	Term -> '(' Term Term ')' .                         (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	';'            reduce using rule 9
	'fn'           reduce using rule 9
	'in'           reduce using rule 9
	'let'          reduce using rule 9
	L_Ident        reduce using rule 9
	%eof           reduce using rule 9


State 35

	Term -> 'let' Pattern '=' Term 'in' . ScopedTerm    (rule 11)

	'('            shift, and enter state 13
	'fn'           shift, and enter state 14
	'let'          shift, and enter state 15
	L_Ident        shift, and enter state 7

	Ident          goto state 8
	Term           goto state 10
	ScopedTerm     goto state 36
	VarIdent       goto state 12

State 36

	Term -> 'let' Pattern '=' Term 'in' ScopedTerm .    (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	';'            reduce using rule 11
	'fn'           reduce using rule 11
	'in'           reduce using rule 11
	'let'          reduce using rule 11
	L_Ident        reduce using rule 11
	%eof           reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 19
Number of terminals: 9
Number of non-terminals: 13
Number of states: 37
