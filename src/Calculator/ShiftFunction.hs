-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module ShiftFunction where

import Prelude (($), String, (++), (>), (>=), Show, show, Integer, Maybe (..), fst, snd, otherwise, (==), (+))
import qualified DBruijnCalc.DeBruijnGrammar.Abs
import DBruijnCalc.DeBruijnGrammar.Abs ( Program(..), Term(..), Ident(..), VarIdent(..), ScopedTerm(..))


shiftIdent :: Ident -> Ident
shiftIdent x = case x of
  Ident string -> Ident string

shiftTerm :: Term -> Integer -> Integer -> Term
shiftTerm x cutoff d = case x of
  Var variable -> Var (shiftVariable variable cutoff d) 
  Lam term -> 
    case term of 
      ScopedTerm term -> Lam (ScopedTerm(shiftTerm term (cutoff+1) d))
  Let term1 term2 -> 
    case term2 of 
      ScopedTerm term2 -> Let (shiftTerm term1 cutoff d) (ScopedTerm(shiftTerm term2 (cutoff+1) d))
  Application term1 term2 ->
    Application (shiftTerm term1 cutoff d) (shiftTerm term2 cutoff d)
    
shiftVariable :: VarIdent -> Integer -> Integer -> VarIdent
shiftVariable x cutoff d = case x of
  VarIdent ident -> VarIdent (shiftIdent ident)
  DBBound integer -> 
    if integer >= cutoff
      then DBBound (integer + d)
      else DBBound integer
