-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module DBruinCalc.DeBruĳnGrammar.Par
  ( happyError
  , myLexer
  , pProgram
  , pTerm
  , pListTerm
  , pVariable
  ) where

import Prelude

import qualified DBruinCalc.DeBruĳnGrammar.Abs
import DBruinCalc.DeBruĳnGrammar.Lex

}

%name pProgram Program
%name pTerm Term
%name pListTerm ListTerm
%name pVariable Variable
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('      { PT _ (TS _ 1) }
  ')'      { PT _ (TS _ 2) }
  '+'      { PT _ (TS _ 3) }
  '-'      { PT _ (TS _ 4) }
  '.'      { PT _ (TS _ 5) }
  ';'      { PT _ (TS _ 6) }
  'BOUND'  { PT _ (TS _ 7) }
  'lambda' { PT _ (TS _ 8) }
  L_Ident  { PT _ (TV $$)  }
  L_doubl  { PT _ (TD $$)  }
  L_integ  { PT _ (TI $$)  }

%%

Ident :: { DBruinCalc.DeBruĳnGrammar.Abs.Ident }
Ident  : L_Ident { DBruinCalc.DeBruĳnGrammar.Abs.Ident $1 }

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Program :: { DBruinCalc.DeBruĳnGrammar.Abs.Program }
Program : ListTerm { DBruinCalc.DeBruĳnGrammar.Abs.AProgram $1 }

Term :: { DBruinCalc.DeBruĳnGrammar.Abs.Term }
Term
  : Variable { DBruinCalc.DeBruĳnGrammar.Abs.Var $1 }
  | Integer { DBruinCalc.DeBruĳnGrammar.Abs.IntConst $1 }
  | Double { DBruinCalc.DeBruĳnGrammar.Abs.DoubleConst $1 }
  | 'lambda' Variable '.' Term { DBruinCalc.DeBruĳnGrammar.Abs.Binder $2 $4 }
  | '(' Term Term ')' { DBruinCalc.DeBruĳnGrammar.Abs.Application $2 $3 }
  | Term '+' Term { DBruinCalc.DeBruĳnGrammar.Abs.Plus $1 $3 }
  | Term '-' Term { DBruinCalc.DeBruĳnGrammar.Abs.Minus $1 $3 }
  | '(' Term ')' { $2 }

ListTerm :: { [DBruinCalc.DeBruĳnGrammar.Abs.Term] }
ListTerm
  : {- empty -} { [] }
  | Term { (:[]) $1 }
  | Term ';' ListTerm { (:) $1 $3 }

Variable :: { DBruinCalc.DeBruĳnGrammar.Abs.Variable }
Variable
  : Ident { DBruinCalc.DeBruĳnGrammar.Abs.Identifier $1 }
  | 'BOUND' '(' Integer ')' { DBruinCalc.DeBruĳnGrammar.Abs.Bound $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

